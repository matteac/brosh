var $=Object.defineProperty;var w=(l,t,e)=>t in l?$(l,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):l[t]=e;var n=(l,t,e)=>w(l,typeof t!="symbol"?t+"":t,e);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))i(s);new MutationObserver(s=>{for(const r of s)if(r.type==="childList")for(const o of r.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&i(o)}).observe(document,{childList:!0,subtree:!0});function e(s){const r={};return s.integrity&&(r.integrity=s.integrity),s.referrerPolicy&&(r.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?r.credentials="include":s.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function i(s){if(s.ep)return;s.ep=!0;const r=e(s);fetch(s.href,r)}})();class C{constructor(t){n(this,"fs");n(this,"env");this.fs={},this.env=t,this.create_dir("/bin")}resolve_path(t){if(t.startsWith("/"))return t;const i=`${this.env.current_dir}/${t}`.split("/").filter(Boolean),s=[];for(const r of i)r===".."?s.pop():r!=="."&&s.push(r);return`/${s.join("/")}`}create_dir(t){const e=this.resolve_path(t).split("/").filter(Boolean),i=e.pop();let s=this.fs;if(!i)return{msg:`Cannot create ${t}`,__meta_err:!0};for(const r of e){const o=s[r];if(!o)return{msg:`Not a directory: ${r}`,__meta_err:!0};s=o}return s[i]?{msg:`Already exists: ${this.resolve_path(t)}`,__meta_err:!0}:(s[i]={},null)}create_file(t){const e=this.resolve_path(t).split("/").filter(Boolean),i=e.pop();let s=this.fs;if(!i)return{msg:`Cannot create ${t}`,__meta_err:!0};for(const r of e){const o=s[r];if(!o)return{msg:`Not a directory: ${r}`,__meta_err:!0};s=o}return s[i]?{msg:`Already exists: ${this.resolve_path(i)}`,__meta_err:!0}:(s[i]={__meta_file:!0},null)}read_file(t){const e=this.get_file(t);return e?e.content:{msg:`File doesn't exists: ${this.resolve_path(t)}`,__meta_err:!0}}write_file(t,e){const i=this.get_file(t);return i?(i.content=e,!0):!1}append_file(t,e){const i=this.get_file(t);return i?(i.content+=e,!0):!1}delete(t){const e=this.resolve_path(t).split("/").filter(Boolean),i=e.pop();if(!i&&t.trim()==="/")return this.fs={},null;let s=this.fs;for(const r of e){if(!s[r]||this.is_file_obj(s[r]))return{msg:`Not a directory: ${r}`,__meta_err:!0};s=s[r]}return s[i]?(delete s[i],null):{msg:`File or directory doesn't exist: ${i}`,__meta_err:!0}}exists(t){const e=this.resolve_path(t).split("/").filter(Boolean);let i=this.fs;for(const s of e){if(!i[s])return!1;i=i[s]}return!0}is_file(t){return!!this.get_file(t)}is_dir(t){return!!this.get_dir(t)}list_dir(t){const e=this.get_dir(t);if(!e)return{msg:"Directory doesn't exists: ${path}",__meta_err:!0};const i={};for(const s of Object.keys(e))i[s]=this.is_file(`${t}/${s}`);return i}get_file(t){const i=this.resolve_path(t).split("/").filter(Boolean);let s=this.fs;for(const r of i){if(!s[r])return null;s=s[r]}return this.is_file_obj(s)?s:null}get_dir(t){const i=this.resolve_path(t).split("/").filter(Boolean);let s=this.fs;for(const r of i){if(!s[r])return null;s=s[r]}return this.is_file_obj(s)?null:s}is_file_obj(t){return t&&t.__meta_file===!0}}class x{constructor(t,e,i,s){n(this,"fs");n(this,"io");n(this,"ed");n(this,"env");n(this,"builtins");n(this,"aliases");n(this,"history");this.fs=t,this.io=e,this.ed=i,this.env=s,this.builtins=[],this.aliases=new Map,this.history={cmds:[],index:-1,blacklist:[]},this.add_builtin("clear"),this.aliases.set("cls","clear"),this.add_builtin("cd"),this.add_builtin("ls"),this.add_builtin("pwd"),this.add_builtin("set"),this.add_builtin("see"),this.add_builtin("alias"),this.add_builtin("mkdir"),this.add_builtin("touch"),this.add_builtin("rm"),this.add_builtin("cat"),this.add_builtin("edit"),this.add_builtin("js"),this.add_builtin("bf"),this.add_builtin("hist"),this.blacklist_hist("hist"),this.add_builtin("builtins","list_builtins"),this.fs.create_file("/bin/example"),this.fs.write_file("/bin/example",`function main(argc, argv) {
  this.io.print(\`2 + 5 = \${sum(2, 5)}\`);
}
return main


function sum(a, b) {
  return a + b;
}
`),this.fs.create_dir("/dev"),this.fs.create_file("/dev/example.bf"),this.fs.write_file("/dev/example.bf",`++++++++                Set Cell #0 to 8
[
    >++++               Add 4 to Cell #1; this will always set Cell #1 to 4
    [                   as the cell will be cleared by the loop
        >++             Add 2 to Cell #2
        >+++            Add 3 to Cell #3
        >+++            Add 3 to Cell #4
        >+              Add 1 to Cell #5
        <<<<-           Decrement the loop counter in Cell #1
    ]                   Loop until Cell #1 is zero; number of iterations is 4
    >+                  Add 1 to Cell #2
    >+                  Add 1 to Cell #3
    >-                  Subtract 1 from Cell #4
    >>+                 Add 1 to Cell #6
    [<]                 Move back to the first zero cell you find; this will
                        be Cell #1 which was cleared by the previous loop
    <-                  Decrement the loop Counter in Cell #0
]                       Loop until Cell #0 is zero; number of iterations is 8

The result of this is:
Cell no :   0   1   2   3   4   5   6
Contents:   0   0  72 104  88  32   8
Pointer :   ^

>>.                     Cell #2 has value 72 which is 'H'
>---.                   Subtract 3 from Cell #3 to get 101 which is 'e'
+++++++..+++.           Likewise for 'llo' from Cell #3
>>.                     Cell #5 is 32 for the space
<-.                     Subtract 1 from Cell #4 for 87 to give a 'W'
<.                      Cell #3 was set to 'o' from the end of 'Hello'
+++.------.--------.    Cell #3 for 'rl' and 'd'
>>+.                    Add 1 to Cell #5 gives us an exclamation point
>++.                    And finally a newline from Cell #6`)}add_to_hist(t,e){if(this.history.blacklist.includes(t))return;const i=`${t} ${e.join(" ")}`.trim();this.history.cmds[this.history.cmds.length-1]!==i&&(this.history.cmds.push(i),this.history.index=this.history.cmds.length)}blacklist_hist(t){this.history.blacklist.push(t)}get_prev_cmd(){return this.history.index>0?(this.history.index-=1,this.history.cmds[this.history.index]):null}get_next_cmd(){return this.history.index<this.history.cmds.length?(this.history.index+=1,this.history.index===this.history.cmds.length?"":this.history.cmds[this.history.index]):""}get_exe(t){const e=this.env.vars.PATH;if(!e)return this.io.eprint("PATH is not set"),null;for(const i of e.split(":"))if(this.fs.exists(`${i}/${t}`))return this.fs.read_file(`${i}/${t}`);return null}exec(t){let[e,...i]=t.split(" ").filter(Boolean);if(!e)return 0;for(;this.aliases.has(e);)e=this.aliases.get(e);this.add_to_hist(e,i),this.history.index=this.history.cmds.length;const s=this.get_exe(e);return s?this.run(s,i):(this.io.eprint(`Unknown command: ${e}`),1)}run(t,e){return new Function(t).call(this).call(this,e.length,e)}add_builtin(t,e){this.fs.create_file(`/bin/${t}`),this.fs.write_file(`/bin/${t}`,`return this.${e||t}`),this.builtins.push(t)}clear(t,e){return this.io.clear(),0}cd(t,e){if(t<0||t>1)return this.io.eprint("Usage: cd &lt;DIRECTORY&gt;"),1;if(t===0){let i=this.env.vars.HOME;return i||(this.io.eprint("HOME is not set, defaulting to '/'"),i="/"),this.fs.exists(i)?(this.env.current_dir=i,0):(this.io.eprint(`Not a directory: ${i}`),1)}return this.fs.exists(e[0])?(this.env.current_dir=this.fs.resolve_path(e[0]),0):(this.io.eprint(`Not a directory: ${e[0]}`),1)}ls(t,e){if(t<=0){let i=this.fs.list_dir(this.env.current_dir);if(i.__meta_err)return this.io.eprint("Error listing dir"),1;i=i;for(const s of Object.keys(i))this.io.print(`${i[s]?"f":"d"} ${s}`);return 0}for(const i of e){let s=this.fs.list_dir(i);if(s.__meta_err){this.io.eprint("Error listing dir");continue}s=s,this.io.print(i);for(const r of Object.keys(s))this.io.print(`  ${s[r]?"f":"d"} ${r}`)}return 0}pwd(t,e){return t>0?(this.io.eprint("Too many arguments"),this.io.eprint("Usage: pwd"),1):(this.io.print(this.env.current_dir),0)}set(t,e){if(t<2||t>3)return this.io.eprint("Usage: set &lt;VAR&gt; &lt;VALUE&gt; [OPTIONS]"),this.io.eprint("OPTIONS:"),this.io.eprint("  -a | --append: append to existing value"),1;const i=this.env.vars[e[0]];return t===3&&(e[2]==="-a"||e[2]==="--append")&&i?(this.env.vars[e[0]]=`${i}:${e[1]}`,0):(this.env.vars[e[0]]=`${e[1]}`,0)}see(t,e){if(t<=0)return this.io.eprint("Usage: see &lt;VAR(s)&gt;"),1;for(const i of e)this.io.print(`${i}: ${this.env.vars[i]}`);return 0}alias(t,e){if(t<1||t!==2&&e[t-1]!=="-p"&&e[t-1]!=="--print")return this.io.eprint("Usage: alias &lt;ALIAS&gt; &lt;COMMAND&gt; | &lt;ALIASES&gt; [OPTIONS]"),this.io.eprint(`OPTIONS:
  -p | --print: print aliases`),1;if(e[t-1]==="-p"||e[t-1]==="--print"){if(e.pop(),e.length===0)return this.aliases.forEach((i,s)=>this.io.print(`${s}: ${i}`)),0;for(const i of e){const s=this.aliases.get(i);if(!s){this.io.eprint(`Unknown alias: '${i}'`);continue}this.io.print(`${i}: ${s}`)}return 0}return this.aliases.set(e[0],e[1]),0}mkdir(t,e){if(t<=0)return this.io.eprint("Usage: mkdir &lt;DIRECTORY(ies)&gt;"),1;for(const i of e){const s=this.fs.create_dir(i);s!=null&&this.io.eprint(s.msg)}return 0}touch(t,e){if(t<=0)return this.io.eprint("Usage: touch &lt;FILE(s)&gt;"),1;for(const i of e){const s=this.fs.create_file(i);s!=null&&this.io.eprint(s.msg)}return 0}rm(t,e){t<=0&&this.io.eprint("Usage: rm &lt;FILE(s)&gt;");for(const i of e){const s=this.fs.delete(i);s!=null&&this.io.eprint(s.msg)}return 0}cat(t,e){if(t<=0)return this.io.eprint("Usage: cat &lt;FILE(s)&gt;"),1;for(const i of e){const s=this.fs.read_file(i);if(typeof s!="string"){this.io.eprint(s.msg);continue}this.io.print(s)}return 0}edit(t,e){if(t<=0)return this.io.eprint("Usage: edit &lt;FILE&gt;"),1;if(t>1)return this.io.eprint("Too many arguments"),this.io.eprint("Usage: edit &lt;FILE&gt;"),1;const i=this.fs.get_file(e[0]);return i?(this.ed.open(i),0):(this.io.eprint(`File doesn't exists: '${e[0]}'`),1)}js(t,e){if(t<=0)return this.io.eprint("Usage: js &lt;FILE&gt; [ARGS]"),1;const i=this.fs.read_file(e[0]);return typeof i!="string"?(this.io.eprint(i.msg),1):(e.shift(),this.run(i,e))}hist(t,e){if(t>0)return this.io.eprint("Too many arguments"),this.io.eprint("Usage: hist"),1;for(const i of this.history.cmds)this.io.print(i);return 0}list_builtins(t,e){for(const i of this.builtins)this.io.print(i);return 0}bf(t,e){if(t<1)return this.io.eprint("Usage: bf <FILE> [STACK_SIZE]"),1;const s=e[0];if(!this.fs.exists(s))return this.io.eprint(`File doesn't exist: '${s}'`),1;let r=3e3;if(t>=2){const p=Number(e[1]);if(Number.isNaN(p)||p<=0)return this.io.eprint("Invalid stack size"),1;r=p}const o=this.fs.read_file(s);if(typeof o!="string")return this.io.eprint("Error reading file"),1;const f=new Uint8Array(r);let h=0,u=0;const c=[];for(this.io.newline_empty();u<o.length;){switch(o[u]){case">":h=(h+1)%r;break;case"<":h=(h-1+r)%r;break;case"+":f[h]=f[h]+1&255;break;case"-":f[h]=(f[h]===0?255:f[h]-1)&255;break;case".":this.io.put(String.fromCharCode(f[h]));break;case"[":if(f[h]===0){let _=1;for(u++;u<o.length&&(o[u]==="["&&_++,o[u]==="]"&&_--,_!==0);)u++;if(_!==0)return this.io.eprint("Unmatched '['"),1}else c.push(u);break;case"]":if(c.length===0)return this.io.eprint("Unmatched ']'"),1;f[h]!==0?u=c[c.length-1]:c.pop();break}u++}return 0}}class k{constructor(t,e){n(this,"output");n(this,"input");n(this,"__input_listener",t=>{});this.output=t,this.input=e}set_input_listener(t){this.input.removeEventListener("keydown",this.__input_listener),this.__input_listener=t,this.input.addEventListener("keydown",this.__input_listener)}prompt_print(t,e,i=""){const s=`${t}`;for(const r of s.split(`
`))this.output.innerHTML+=`<div class="line"><span class="prompt">${i} ${e}</span><pre> ${r}</pre></div>`}print(t){const e=`${t}`;for(const i of e.split(`
`))i===""&&this.newline(),this.output.innerHTML+=`<div class="line"><pre>${i}</pre></div>`}eprint(t){const e=`${t}`;for(const i of e.split(`
`))i===""&&this.newline(),this.output.innerHTML+=`<div class="error line"><pre>${i}</pre></div>`}put(t){if(t===`
`){this.newline_empty();return}this.output.lastChild||this.newline(),this.output.lastChild.innerHTML+=`${t}`}clear(){this.output.innerHTML=""}newline(){this.output.innerHTML+='<div class="line"><pre> </pre></div>'}newline_empty(){this.output.innerHTML+='<div class="line"></div>'}}class L{constructor(t,e,i){n(this,"dialog");n(this,"input");n(this,"save_btn");n(this,"file");this.dialog=t,this.input=e,this.save_btn=i,this.file=null,this.save_btn.addEventListener("click",()=>{this.save()}),this.dialog.addEventListener("close",()=>{this.close()}),this.dialog.addEventListener("keydown",s=>{if(s.key==="Escape"){s.preventDefault();return}})}open(t){this.file=t,this.input.value=t.content||"",this.dialog.showModal()}save(){if(!this.file){alert("No file open");return}this.file.content=this.input.value}close(){this.input.value="",this.file=null}}const g="$",y=document.querySelector("#terminal"),b=document.querySelector("#output"),T=document.querySelector("#input"),v=document.querySelector("#prompt"),A=document.querySelector("#editor"),S=document.querySelector("#editor-input"),E=document.querySelector("#save-button"),d={current_dir:"/",vars:{PATH:"/bin"}},a=new k(b,T),O=new C(d),U=new L(A,S,E),m=new x(O,a,U,d);v.innerHTML=`${d.current_dir} ${g} `;a.set_input_listener(l=>{const t=l.target;switch(l.key){case"ArrowUp":{const e=m.get_prev_cmd();if(!e)return;t.value=e,setTimeout(()=>{t.focus(),t.setSelectionRange(e.length,e.length)},1)}break;case"ArrowDown":{const e=m.get_next_cmd();t.value=e,setTimeout(()=>{t.focus(),t.setSelectionRange(e.length,e.length)},1)}break;case"Enter":{const e=t.value;t.value="",a.prompt_print(e,g,d.current_dir),m.exec(e),b.scrollTo(0,b.scrollHeight),y.scrollTo(0,y.scrollHeight),v.innerHTML=`${d.current_dir} ${g} `}break}});a.print("Welcome to Brosh!");a.print("Type 'builtins' to see a list of available commands.");a.newline();a.print("> To make a custom command create a file in your path and return the main function");a.print("> You can access the shell context with 'this'");a.print("> See /bin/example");
