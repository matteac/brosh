var _=Object.defineProperty;var m=(o,t,i)=>t in o?_(o,t,{enumerable:!0,configurable:!0,writable:!0,value:i}):o[t]=i;var n=(o,t,i)=>m(o,typeof t!="symbol"?t+"":t,i);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const r of document.querySelectorAll('link[rel="modulepreload"]'))e(r);new MutationObserver(r=>{for(const s of r)if(s.type==="childList")for(const l of s.addedNodes)l.tagName==="LINK"&&l.rel==="modulepreload"&&e(l)}).observe(document,{childList:!0,subtree:!0});function i(r){const s={};return r.integrity&&(s.integrity=r.integrity),r.referrerPolicy&&(s.referrerPolicy=r.referrerPolicy),r.crossOrigin==="use-credentials"?s.credentials="include":r.crossOrigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function e(r){if(r.ep)return;r.ep=!0;const s=i(r);fetch(r.href,s)}})();class g{constructor(t){n(this,"fs");n(this,"env");this.fs={},this.env=t,this.create_dir("/bin")}resolve_path(t){if(t.startsWith("/"))return t;const e=`${this.env.current_dir}/${t}`.split("/").filter(Boolean),r=[];for(const s of e)s===".."?r.pop():s!=="."&&r.push(s);return`/${r.join("/")}`}create_dir(t){const i=this.resolve_path(t).split("/").filter(Boolean),e=i.pop();let r=this.fs;if(!e)return{msg:`Cannot create ${t}`,__meta_err:!0};for(const s of i){const l=r[s];if(!l)return{msg:`Not a directory: ${s}`,__meta_err:!0};r=l}return r[e]?{msg:`Already exists: ${this.resolve_path(t)}`,__meta_err:!0}:(r[e]={},null)}create_file(t){const i=this.resolve_path(t).split("/").filter(Boolean),e=i.pop();let r=this.fs;if(!e)return{msg:`Cannot create ${t}`,__meta_err:!0};for(const s of i){const l=r[s];if(!l)return{msg:`Not a directory: ${s}`,__meta_err:!0};r=l}return r[e]?{msg:`Already exists: ${this.resolve_path(e)}`,__meta_err:!0}:(r[e]={__meta_file:!0},null)}read_file(t){const i=this.get_file(t);return i?i.content:{msg:`File doesn't exists: ${this.resolve_path(t)}`,__meta_err:!0}}write_file(t,i){const e=this.get_file(t);return e?(e.content=i,!0):!1}append_file(t,i){const e=this.get_file(t);return e?(e.content+=i,!0):!1}delete(t){const i=this.resolve_path(t).split("/").filter(Boolean),e=i.pop();if(!e&&t.trim()==="/")return this.fs={},null;let r=this.fs;for(const s of i){if(!r[s]||this.is_file_obj(r[s]))return{msg:`Not a directory: ${s}`,__meta_err:!0};r=r[s]}return r[e]?(delete r[e],null):{msg:`File or directory doesn't exist: ${e}`,__meta_err:!0}}exists(t){const i=this.resolve_path(t).split("/").filter(Boolean);let e=this.fs;for(const r of i){if(!e[r])return!1;e=e[r]}return!0}is_file(t){return!!this.get_file(t)}is_dir(t){return!!this.get_dir(t)}list_dir(t){const i=this.get_dir(t);if(!i)return{msg:"Directory doesn't exists: ${path}",__meta_err:!0};const e={};for(const r of Object.keys(i))e[r]=this.is_file(`${t}/${r}`);return e}get_file(t){const e=this.resolve_path(t).split("/").filter(Boolean);let r=this.fs;for(const s of e){if(!r[s])return null;r=r[s]}return this.is_file_obj(r)?r:null}get_dir(t){const e=this.resolve_path(t).split("/").filter(Boolean);let r=this.fs;for(const s of e){if(!r[s])return null;r=r[s]}return this.is_file_obj(r)?null:r}is_file_obj(t){return t&&t.__meta_file===!0}}class v{constructor(t,i,e,r){n(this,"fs");n(this,"io");n(this,"ed");n(this,"env");n(this,"builtins");n(this,"history");this.fs=t,this.io=i,this.ed=e,this.env=r,this.builtins=[],this.history={cmds:[],index:-1,blacklist:[]},this.add_builtin("clear"),this.add_builtin("cls","clear"),this.add_builtin("cd"),this.add_builtin("ls"),this.add_builtin("pwd"),this.add_builtin("set"),this.add_builtin("see"),this.add_builtin("mkdir"),this.add_builtin("touch"),this.add_builtin("rm"),this.add_builtin("cat"),this.add_builtin("ed","editor"),this.add_builtin("hist"),this.blacklist_hist("hist"),this.add_builtin("builtins","list_builtins"),this.fs.create_file("/bin/example"),this.fs.write_file("/bin/example",`function main(argc, argv) {
  this.io.print(\`2 + 5 = \${sum(2, 5)}\`);
}
return main


function sum(a, b) {
  return a + b;
}
`)}add_to_hist(t,i){if(this.history.blacklist.includes(t))return;const e=`${t} ${i.join(" ")}`.trim();this.history.cmds[this.history.cmds.length-1]!==e&&(this.history.cmds.push(e),this.history.index=this.history.cmds.length)}blacklist_hist(t){this.history.blacklist.push(t)}get_prev_cmd(){return this.history.index>0?(this.history.index-=1,this.history.cmds[this.history.index]):null}get_next_cmd(){return this.history.index<this.history.cmds.length?(this.history.index+=1,this.history.index===this.history.cmds.length?"":this.history.cmds[this.history.index]):""}get_exe(t){const i=this.env.vars.PATH;if(!i)return this.io.eprint("PATH is not set"),null;for(const e of i.split(":"))if(this.fs.exists(`${e}/${t}`))return this.fs.read_file(`${e}/${t}`);return null}exec(t){const[i,...e]=t.split(" ").filter(Boolean);if(!i)return 0;this.add_to_hist(i,e);const r=this.get_exe(i);return r?new Function(r).call(this).call(this,e.length,e):(this.io.eprint(`Unknown command: ${i}`),1)}add_builtin(t,i){this.fs.create_file(`/bin/${t}`),this.fs.write_file(`/bin/${t}`,`return this.${i||t}`),this.builtins.push(t)}clear(t,i){return this.io.clear(),0}cd(t,i){if(t<0||t>1)return this.io.eprint("Usage: cd &lt;DIRECTORY&gt;"),1;if(t===0){let e=this.env.vars.HOME;return e||(this.io.eprint("HOME is not set, defaulting to '/'"),e="/"),this.fs.exists(e)?(this.env.current_dir=e,0):(this.io.eprint(`Not a directory: ${e}`),1)}return this.fs.exists(i[0])?(this.env.current_dir=this.fs.resolve_path(i[0]),0):(this.io.eprint(`Not a directory: ${i[0]}`),1)}ls(t,i){if(t<=0){let e=this.fs.list_dir(this.env.current_dir);if(e.__meta_err)return this.io.eprint("Error listing dir"),1;e=e;for(const r of Object.keys(e))this.io.print(`${e[r]?"f":"d"} ${r}`);return 0}for(const e of i){let r=this.fs.list_dir(e);if(r.__meta_err){this.io.eprint("Error listing dir");continue}r=r,this.io.print(e);for(const s of Object.keys(r))this.io.print(`  ${r[s]?"f":"d"} ${s}`)}return 0}pwd(t,i){return t>0?(this.io.eprint("Too many arguments"),this.io.eprint("Usage: pwd"),1):(this.io.print(this.env.current_dir),0)}set(t,i){if(t<2||t>3)return this.io.eprint("Usage: set &lt;VAR&gt; &lt;VALUE&gt; [OPTIONS]"),this.io.eprint("OPTIONS:"),this.io.eprint("  -a | --append: append to existing value"),1;const e=this.env.vars[i[0]];return t===3&&(i[2]==="-a"||i[2]==="--append")&&e?(this.env.vars[i[0]]=`${e}:${i[1]}`,0):(this.env.vars[i[0]]=`${i[1]}`,0)}see(t,i){if(t<=0)return this.io.eprint("Usage: see &lt;VAR(s)&gt;"),1;for(const e of i)this.io.print(`${e}: ${this.env.vars[e]}`);return 0}mkdir(t,i){if(t<=0)return this.io.eprint("Usage: mkdir &lt;DIRECTORY(ies)&gt;"),1;for(const e of i){const r=this.fs.create_dir(e);r!=null&&this.io.eprint(r.msg)}return 0}touch(t,i){if(t<=0)return this.io.eprint("Usage: touch &lt;FILE(s)&gt;"),1;for(const e of i){const r=this.fs.create_file(e);r!=null&&this.io.eprint(r.msg)}return 0}rm(t,i){t<=0&&this.io.eprint("Usage: rm &lt;FILE(s)&gt;");for(const e of i){const r=this.fs.delete(e);r!=null&&this.io.eprint(r.msg)}return 0}cat(t,i){if(t<=0)return this.io.eprint("Usage: cat &lt;FILE(s)&gt;"),1;for(const e of i){const r=this.fs.read_file(e);if(typeof r!="string"){this.io.eprint(r.msg);continue}this.io.print(r)}return 0}editor(t,i){if(t<=0)return this.io.eprint("Usage: ed &lt;FILE&gt;"),1;if(t>1)return this.io.eprint("Too many arguments"),this.io.eprint("Usage: ed &lt;FILE&gt;"),1;const e=this.fs.get_file(i[0]);return e?(this.ed.open(e),0):(this.io.eprint(`File doesn't exists: '${i[0]}'`),1)}hist(t,i){if(t>0)return this.io.eprint("Too many arguments"),this.io.eprint("Usage: hist"),1;for(const e of this.history.cmds)this.io.print(e);return 0}list_builtins(t,i){for(const e of this.builtins)this.io.print(e);return 0}}class y{constructor(t,i){n(this,"output");n(this,"input");n(this,"__input_listener",t=>{});this.output=t,this.input=i}set_input_listener(t){this.input.removeEventListener("keydown",this.__input_listener),this.__input_listener=t,this.input.addEventListener("keydown",this.__input_listener)}prompt_print(t,i,e=""){const r=`${t}`;for(const s of r.split(`
`))this.output.innerHTML+=`<div class="line"><span class="prompt">${e} ${i}</span><pre> ${s}</pre></div>`}print(t){const i=`${t}`;for(const e of i.split(`
`))e===""&&this.newline(),this.output.innerHTML+=`<div class="line"><pre>${e}</pre></div>`}eprint(t){const i=`${t}`;for(const e of i.split(`
`))e===""&&this.newline(),this.output.innerHTML+=`<div class="error line"><pre>${e}</pre></div>`}clear(){this.output.innerHTML=""}newline(){this.output.innerHTML+='<div class="line"><pre> </pre></div>'}}class b{constructor(t,i,e){n(this,"dialog");n(this,"input");n(this,"save_btn");n(this,"file");this.dialog=t,this.input=i,this.save_btn=e,this.file=null,this.save_btn.addEventListener("click",()=>{this.save()}),this.dialog.addEventListener("close",()=>{this.close()})}open(t){this.file=t,this.input.value=t.content||"",this.dialog.showModal()}save(){if(!this.file){alert("No file open");return}this.file.content=this.input.value}close(){this.input.value="",this.file=null}}const f="$",d=document.querySelector("#terminal"),a=document.querySelector("#output"),$=document.querySelector("#input"),p=document.querySelector("#prompt"),x=document.querySelector("#editor"),w=document.querySelector("#editor-input"),T=document.querySelector("#save-button"),h={current_dir:"/",vars:{PATH:"/bin"}},u=new y(a,$),L=new g(h),E=new b(x,w,T),c=new v(L,u,E,h);p.innerHTML=`${h.current_dir} ${f} `;u.set_input_listener(o=>{const t=o.target;switch(o.key){case"ArrowUp":{const i=c.get_prev_cmd();if(!i)return;t.value=i,setTimeout(()=>{t.focus(),t.setSelectionRange(i.length,i.length)},1)}break;case"ArrowDown":{const i=c.get_next_cmd();t.value=i,setTimeout(()=>{t.focus(),t.setSelectionRange(i.length,i.length)},1)}break;case"Enter":{const i=t.value;t.value="",u.prompt_print(i,f,h.current_dir),c.exec(i),a.scrollTo(0,a.scrollHeight),d.scrollTo(0,d.scrollHeight+100),p.innerHTML=`${h.current_dir} ${f} `}break}});u.print("Welcome to Brosh!");u.print("Type 'builtins' to see a list of available commands.");u.newline();u.print("> To make a custom command create a file in your path and return the main function");u.print("> You can access the shell context with 'this'");u.print("> See /bin/example");
